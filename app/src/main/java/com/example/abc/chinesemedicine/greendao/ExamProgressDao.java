package com.example.abc.chinesemedicine.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import bean.ExamProgress;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAM_PROGRESS".
*/
public class ExamProgressDao extends AbstractDao<ExamProgress, Long> {

    public static final String TABLENAME = "EXAM_PROGRESS";

    /**
     * Properties of entity ExamProgress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ExamSubject = new Property(1, String.class, "examSubject", false, "EXAM_SUBJECT");
        public final static Property LastExamPosition = new Property(2, int.class, "lastExamPosition", false, "LAST_EXAM_POSITION");
        public final static Property LastExamPercent = new Property(3, float.class, "lastExamPercent", false, "LAST_EXAM_PERCENT");
        public final static Property UserId = new Property(4, Long.class, "userId", false, "USER_ID");
    }

    private Query<ExamProgress> user_List2Query;

    public ExamProgressDao(DaoConfig config) {
        super(config);
    }
    
    public ExamProgressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAM_PROGRESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EXAM_SUBJECT\" TEXT," + // 1: examSubject
                "\"LAST_EXAM_POSITION\" INTEGER NOT NULL ," + // 2: lastExamPosition
                "\"LAST_EXAM_PERCENT\" REAL NOT NULL ," + // 3: lastExamPercent
                "\"USER_ID\" INTEGER);"); // 4: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAM_PROGRESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExamProgress entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String examSubject = entity.getExamSubject();
        if (examSubject != null) {
            stmt.bindString(2, examSubject);
        }
        stmt.bindLong(3, entity.getLastExamPosition());
        stmt.bindDouble(4, entity.getLastExamPercent());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(5, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExamProgress entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String examSubject = entity.getExamSubject();
        if (examSubject != null) {
            stmt.bindString(2, examSubject);
        }
        stmt.bindLong(3, entity.getLastExamPosition());
        stmt.bindDouble(4, entity.getLastExamPercent());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(5, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ExamProgress readEntity(Cursor cursor, int offset) {
        ExamProgress entity = new ExamProgress( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // examSubject
            cursor.getInt(offset + 2), // lastExamPosition
            cursor.getFloat(offset + 3), // lastExamPercent
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExamProgress entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExamSubject(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastExamPosition(cursor.getInt(offset + 2));
        entity.setLastExamPercent(cursor.getFloat(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ExamProgress entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ExamProgress entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExamProgress entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "list2" to-many relationship of User. */
    public List<ExamProgress> _queryUser_List2(Long userId) {
        synchronized (this) {
            if (user_List2Query == null) {
                QueryBuilder<ExamProgress> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_List2Query = queryBuilder.build();
            }
        }
        Query<ExamProgress> query = user_List2Query.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
